{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jairfrancesco/infinite-scroll-app/src/ListItems.tsx\";\nimport React from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Row from \"./Row\";\nimport InfiniteLoader from \"react-window-infinite-loader\";\nlet items = {};\nlet requestCache = {};\n\nconst getUrl = (rows, start) => `https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop&sort=population&fields=population,accentcity&rows=${rows}&start=${start}&facet=country`;\n\nconst ListItems = () => {\n  const loadMoreItems = (visibleStartIndex, visibleStopIndex) => {\n    const key = [visibleStartIndex, visibleStopIndex].join(\":\"); // 0:10\n\n    if (requestCache[key]) {\n      return;\n    }\n\n    const length = visibleStopIndex - visibleStartIndex;\n    const range = [...Array(length).keys()];\n    const visibleRange = range.map(x => x + visibleStartIndex);\n    const itemsRetrieved = visibleRange.every(index => !!items[index]);\n\n    if (itemsRetrieved) {\n      requestCache[key] = key;\n      return;\n    }\n\n    return fetch(getUrl(length, visibleStartIndex)).then(response => response.json()).then(data => {\n      data.records.forEach((city, index) => {\n        items[index + visibleStartIndex] = city.fields;\n      });\n    }).catch(error => console.error(\"Error:\", error));\n  };\n\n  const isItemLoaded = index => !!items[index];\n\n  return /*#__PURE__*/_jsxDEV(AutoSizer, {\n    children: ({\n      height,\n      width\n    }) => {\n      const itemData = () => ({\n        items: items\n      });\n\n      return /*#__PURE__*/_jsxDEV(InfiniteLoader, {\n        isItemLoaded: isItemLoaded,\n        loadMoreItems: loadMoreItems,\n        itemCount: 1000,\n        children: ({\n          onItemsRendered,\n          ref\n        }) => /*#__PURE__*/_jsxDEV(List, {\n          className: \"List\",\n          height: height,\n          itemCount: 1000,\n          itemSize: 35,\n          width: width,\n          itemData: itemData,\n          children: Row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ListItems;\nexport default ListItems;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListItems\");","map":{"version":3,"sources":["/Users/jairfrancesco/infinite-scroll-app/src/ListItems.tsx"],"names":["React","FixedSizeList","List","AutoSizer","Row","InfiniteLoader","items","requestCache","getUrl","rows","start","ListItems","loadMoreItems","visibleStartIndex","visibleStopIndex","key","join","length","range","Array","keys","visibleRange","map","x","itemsRetrieved","every","index","fetch","then","response","json","data","records","forEach","city","fields","catch","error","console","isItemLoaded","height","width","itemData","onItemsRendered","ref"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,IAA1B,QAAsC,cAAtC;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAMA,IAAIC,KAAyB,GAAG,EAAhC;AACA,IAAIC,YAAgC,GAAG,EAAvC;;AAEA,MAAMC,MAAM,GAAG,CAACC,IAAD,EAAeC,KAAf,KACZ,oIAAmID,IAAK,UAASC,KAAM,gBAD1J;;AAGA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,aAAa,GAAG,CACpBC,iBADoB,EAEpBC,gBAFoB,KAGjB;AACH,UAAMC,GAAG,GAAG,CAACF,iBAAD,EAAoBC,gBAApB,EAAsCE,IAAtC,CAA2C,GAA3C,CAAZ,CADG,CAC0D;;AAC7D,QAAIT,YAAY,CAACQ,GAAD,CAAhB,EAAuB;AACrB;AACD;;AAED,UAAME,MAAM,GAAGH,gBAAgB,GAAGD,iBAAlC;AAEA,UAAMK,KAAK,GAAG,CAAC,GAAGC,KAAK,CAACF,MAAD,CAAL,CAAcG,IAAd,EAAJ,CAAd;AAEA,UAAMC,YAAY,GAAGH,KAAK,CAACI,GAAN,CAAWC,CAAD,IAAOA,CAAC,GAAGV,iBAArB,CAArB;AACA,UAAMW,cAAc,GAAGH,YAAY,CAACI,KAAb,CAAoBC,KAAD,IAAW,CAAC,CAACpB,KAAK,CAACoB,KAAD,CAArC,CAAvB;;AAEA,QAAIF,cAAJ,EAAoB;AAClBjB,MAAAA,YAAY,CAACQ,GAAD,CAAZ,GAAoBA,GAApB;AACA;AACD;;AAED,WAAOY,KAAK,CAACnB,MAAM,CAACS,MAAD,EAASJ,iBAAT,CAAP,CAAL,CACJe,IADI,CACEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADf,EAEJF,IAFI,CAEEG,IAAD,IAAU;AACdA,MAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAqB,CAACC,IAAD,EAAOR,KAAP,KAAiB;AACpCpB,QAAAA,KAAK,CAACoB,KAAK,GAAGb,iBAAT,CAAL,GAAmCqB,IAAI,CAACC,MAAxC;AACD,OAFD;AAGD,KANI,EAOJC,KAPI,CAOGC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAPb,CAAP;AAQD,GA7BD;;AA+BA,QAAME,YAAY,GAAIb,KAAD,IAAmB,CAAC,CAACpB,KAAK,CAACoB,KAAD,CAA/C;;AAEA,sBACE,QAAC,SAAD;AAAA,cACG,CAAC;AAAEc,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAuB;AACtB,YAAMC,QAAQ,GAAG,OAAO;AACtBpC,QAAAA,KAAK,EAAEA;AADe,OAAP,CAAjB;;AAGA,0BACE,QAAC,cAAD;AACE,QAAA,YAAY,EAAEiC,YADhB;AAEE,QAAA,aAAa,EAAE3B,aAFjB;AAGE,QAAA,SAAS,EAAE,IAHb;AAAA,kBAKG,CAAC;AAAE+B,UAAAA,eAAF;AAAmBC,UAAAA;AAAnB,SAAD,kBACC,QAAC,IAAD;AACE,UAAA,SAAS,EAAC,MADZ;AAEE,UAAA,MAAM,EAAEJ,MAFV;AAGE,UAAA,SAAS,EAAE,IAHb;AAIE,UAAA,QAAQ,EAAE,EAJZ;AAKE,UAAA,KAAK,EAAEC,KALT;AAME,UAAA,QAAQ,EAAEC,QANZ;AAAA,oBAQGtC;AARH;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,cADF;AAoBD;AAzBH;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CA/DD;;KAAMO,S;AAiEN,eAAeA,SAAf","sourcesContent":["import React from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport Row from \"./Row\";\nimport InfiniteLoader from \"react-window-infinite-loader\";\n\ninterface Dictionary<T> {\n  [Key: string]: T;\n}\n\nlet items: Dictionary<number> = {};\nlet requestCache: Dictionary<number> = {};\n\nconst getUrl = (rows: number, start: number) =>\n  `https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop&sort=population&fields=population,accentcity&rows=${rows}&start=${start}&facet=country`;\n\nconst ListItems = () => {\n  const loadMoreItems = (\n    visibleStartIndex: number,\n    visibleStopIndex: number\n  ) => {\n    const key = [visibleStartIndex, visibleStopIndex].join(\":\"); // 0:10\n    if (requestCache[key]) {\n      return;\n    }\n\n    const length = visibleStopIndex - visibleStartIndex;\n\n    const range = [...Array(length).keys()];\n\n    const visibleRange = range.map((x) => x + visibleStartIndex);\n    const itemsRetrieved = visibleRange.every((index) => !!items[index]);\n\n    if (itemsRetrieved) {\n      requestCache[key] = key;\n      return;\n    }\n\n    return fetch(getUrl(length, visibleStartIndex))\n      .then((response) => response.json())\n      .then((data) => {\n        data.records.forEach((city, index) => {\n          items[index + visibleStartIndex] = city.fields;\n        });\n      })\n      .catch((error) => console.error(\"Error:\", error));\n  };\n\n  const isItemLoaded = (index: number) => !!items[index];\n\n  return (\n    <AutoSizer>\n      {({ height, width }) => {\n        const itemData = () => ({\n          items: items,\n        });\n        return (\n          <InfiniteLoader\n            isItemLoaded={isItemLoaded}\n            loadMoreItems={loadMoreItems}\n            itemCount={1000}\n          >\n            {({ onItemsRendered, ref }) => (\n              <List\n                className=\"List\"\n                height={height}\n                itemCount={1000}\n                itemSize={35}\n                width={width}\n                itemData={itemData}\n              >\n                {Row}\n              </List>\n            )}\n          </InfiniteLoader>\n        );\n      }}\n    </AutoSizer>\n  );\n};\n\nexport default ListItems;\n"]},"metadata":{},"sourceType":"module"}